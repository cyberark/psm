---
# tasks file for psm_hardening

- name: check psm_out_of_domain is boolean
  fail:
    msg: "psm_out_of_domain should be true/false, current type is {{ psm_out_of_domain | type_debug }}"
  when: psm_out_of_domain | type_debug != 'bool'

- name: update psm out-of-domain parameter
  win_shell: |
    try
    {
        $psm_domain = if('{{ psm_out_of_domain }}' -eq 'true') {"Yes"} else {"No"}
        $filePath = "{{ psm_installationautomation_folder }}\\Hardening\\HardeningConfig.xml"
        $xml = [xml](Get-Content $filePath)
        $step1 = $xml.SelectSingleNode("//Step[@Name = 'OutOfDomainHardening']")
        $step1.Enable = $psm_domain
        $xml.Save($filePath)
        exit 0
    }
    catch
    {
        Write-Output "Error occured setting out-of-domain parameter"
        exit 1
    }

- name: update psm hardening app-locker folders
  win_shell: |
    try
    {
        (Get-Content "{{ psm_installation_path }}\PSM\Hardening\PSMConfigureAppLocker.xml").replace("C:\Program Files (x86)\CyberArk\PSM\Components", "{{ psm_installation_path }}\PSM\Components") | Set-Content "{{ psm_installation_path }}\PSM\Hardening\PSMConfigureAppLocker.xml"
        exit 0
    }
    catch
    {
        Write-Output "Error configuring app-locker folders: {0}" -f $PSItem
        exit 1
    }


- name: Hardening Block
  block:

    - name: run psm hardening
      win_shell: |
        Set-Location "{{ psm_installationautomation_folder }}"
        $Action = .\Execute-Stage.ps1 "{{ psm_installationautomation_folder }}\Hardening\HardeningConfig.xml" -displayJson -delayedrestart
        $Action | Out-File -FilePath "{{ psm_hardening_log }}"
        $Result = Get-Content "{{ psm_hardening_log }}" | ConvertFrom-Json
        if ($Result.isSucceeded -ne 0) {
            exit 1
        } else {
            exit 0
        }

    - name: Get log path for hardening
      win_shell: |
        $Result = Get-Content "{{ psm_hardening_log }}"
        Write-Output $Result
      register: log_result

    - name: Fetch hardening log from path
      fetch:
        src: '{{ item.logPath }}'
        dest: '{{ lookup("config", "DEFAULT_LOG_PATH") }}/psm/{{ inventory_hostname }}_hardening.log'
        flat: yes
      with_items:
        - "{{ log_result.stdout | from_json }}"

    - name: Enable AutoAdminLogon
      win_regedit:
        path: 'HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon'
        name: AutoAdminLogon
        data: 1
      with_items:
        - "{{ log_result.stdout | from_json }}"
      when:
        - item.restartRequired
        - psm_restart

    - name: Set Default Username for AutoAdminLogon
      win_regedit:
        path: 'HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon'
        name: DefaultUsername
        data: "{{ ansible_user }}"
      with_items:
        - "{{ log_result.stdout | from_json }}"
      when:
        - item.restartRequired
        - psm_restart

    - name: Set Default Password for AutoAdminLogon
      win_regedit:
        path: 'HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon'
        name: DefaultPassword
        data: "{{ ansible_password }}"
      with_items:
        - "{{ log_result.stdout | from_json }}"
      when:
        - item.restartRequired
        - psm_restart

    - name: Reboot when PSM hardening requires reboot
      win_reboot:
        reboot_timeout: 300
      with_items:
        - "{{ log_result.stdout | from_json }}"
      when:
        - item.restartRequired
        - psm_restart

    - name: Remove AutoAdminLogon
      win_regedit:
        path: 'HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon'
        name: AutoAdminLogon
        state: absent
      with_items:
        - "{{ log_result.stdout | from_json }}"
      when:
        - item.restartRequired
        - psm_restart

    - name: Remove Username for AutoAdminLogon
      win_regedit:
        path: 'HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon'
        name: DefaultUsername
        state: absent
      with_items:
        - "{{ log_result.stdout | from_json }}"
      when:
        - item.restartRequired
        - psm_restart

    - name: Remove Password for AutoAdminLogon
      win_regedit:
        path: 'HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon'
        name: DefaultPassword
        state: absent
      with_items:
        - "{{ log_result.stdout | from_json }}"
      when:
        - item.restartRequired
        - psm_restart

  rescue:

    - name: Get log path for hardening
      win_shell: |
        $Result = Get-Content "{{ psm_hardening_log }}"
        Write-Output $Result
      register: log_result

    - name: Fetch hardening log from path
      fetch:
        src: '{{ item.logPath }}'
        dest: '{{ lookup("config", "DEFAULT_LOG_PATH") }}/psm/{{ inventory_hostname }}_hardening.log'
        flat: yes
      with_items:
        - "{{ log_result.stdout | from_json }}"

    - fail:
        msg: 'ERROR: Hardening failed. For more info check {{ lookup("config", "DEFAULT_LOG_PATH") }}/psm/{{ inventory_hostname }}_hardening.log'

- name: validate hardening
  win_shell: |
    $policyInfPath = "C:\CyberArk\group-policy.inf"
    secedit /export /cfg $policyInfPath /log c:\CyberArk\export.log
    if (Test-Path C:\CyberArk\group-policy.inf)
    {
        $stringFound = Select-String -Path $policyInfPath -Pattern 'PSMShadowUsers'
        if ($stringFound -ne $null)
        {
            exit 0
        }
    }
    exit 1
  when: psm_out_of_domain

- set_fact:
    psm_hardened: true
