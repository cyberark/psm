---
# tasks file for psm_validateparameters
- name: check EULA is accepted
  fail:
    msg: "You must accept EULA to start the playbook"
  when: accept_eula|lower != "yes"

- name: check if psm_zip_file_path undefined
  fail: 
    msg: "psm_zip_file_path is undefined, failing..."
  when: psm_zip_file_path is not defined

- name: check if psm_zip_file_path exists
  stat:
    path="{{ psm_zip_file_path }}"
  register: st
  delegate_to: localhost
  
- fail: 
    msg: "{{ psm_zip_file_path }} not exists, failing..."
  when: not st.stat.exists


####
## ALL PSM STEPS HAS INTERNAL VALIDATION, THEY CAN BE RUN MULITPLE TIMES WITH NO PRIOR VALIDATION
####
# - name: check if psm was already installed
#   win_service: 
#     name: "{{ psm_service_name }}"
#   register: psm_service_info
  
# - name: check if psm scanner was already installed
#   win_service: 
#     name: "{{ psm_scanner_service_name }}"
#   register: psm_scanner_service_info

# - set_fact:
#     psm_exists: "{{ psm_service_info.exists }}"
#     psm_scanner_exists: "{{ psm_scanner_service_info.exists }}"

# - name: check if psm is hardened
#   set_fact: 
#     psm_hardened: true
#   when:
#     - psm_exists and psm_scanner_exists
#     - psm_service_info.username != "LocalSystem" and psm_scanner_service_info.username != "LocalSystem"

- name: check psm service status
  win_service: 
    name: "{{ psm_service_name }}"
  register: psm_service_info

- name: check if psm is registered
  set_fact:
    psm_registered: true
  when: 
    - psm_service_info.exists 
    - psm_service_info.state == "running" 
    