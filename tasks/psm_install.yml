---
# tasks file for psm installation

- name: Set installation folder on xml config file
  win_shell: |
    try
    {
        ### This script set the install directory received from var in the install config file
        $filePath = "{{ psm_installationautomation_folder }}\\Installation\\InstallationConfig.xml"
        $xml = [xml](Get-Content $filePath)
        $step1 = $xml.SelectSingleNode("//Parameter[@Name = 'InstallationDirectory']")
        $step1.Value = "{{ psm_installation_path }}"
        $step2 = $xml.SelectSingleNode("//Parameter[@Name = 'RecordingDirectory']")
        $step2.Value = "{{ psm_installation_path }}\PSM\Recordings"
        $xml.Save($filePath)
        exit 0
    }
    catch
    {
        Write-Output "Error occured during SetAtrributeInXML"
        exit 1
    }

- name: Installation Block
  block:

    - name: Execute PSM installation
      win_shell: |
        Set-Location "{{ psm_installationautomation_folder }}"
        $Action = .\Execute-Stage.ps1 "{{ psm_installationautomation_folder }}\Installation\InstallationConfig.xml" -silentMode "Silent" -displayJson -delayedrestart
        $Action | Out-File -FilePath "{{ psm_install_log }}"
        $Result = Get-Content "{{ psm_install_log }}" -Raw | ConvertFrom-Json
        if ($Result.isSucceeded -ne 0) {
            exit 1
        } else {
            exit 0
        }

    - name: Get log path for installation
      win_shell: |
        $Result = Get-Content "{{ psm_install_log }}"
        Write-Output $Result
      register: log_result

    - name: Fetch installation log from path
      fetch:
        src: '{{ item.logPath }}'
        dest: '{{ lookup("config", "DEFAULT_LOG_PATH") | dirname }}/psm/{{ inventory_hostname }}_install.log'
        flat: yes
      with_items:
        - "{{ log_result.stdout | from_json }}"

    - name: Enable AutoAdminLogon
      win_regedit:
        path: HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon
        name: AutoAdminLogon
        data: 1
      with_items:
        - "{{ log_result.stdout | from_json }}"
      when:
        - item.restartRequired
        - psm_restart

    - name: Set default username for AutoAdminLogon
      win_regedit:
        path: HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon
        name: DefaultUsername
        data: "{{ ansible_user }}"
      with_items:
        - "{{ log_result.stdout | from_json }}"
      when:
        - item.restartRequired
        - psm_restart

    - name: Set default password for AutoAdminLogon
      win_regedit:
        path: HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon
        name: DefaultPassword
        data: "{{ ansible_password }}"
      with_items:
        - "{{ log_result.stdout | from_json }}"
      when:
        - item.restartRequired
        - psm_restart

    - name: Reboot when PSM Installation requires reboot
      win_reboot:
        reboot_timeout: 300
      with_items:
        - "{{ log_result.stdout | from_json }}"
      when:
        - item.restartRequired
        - psm_restart

    - name: Remove AutoAdminLogon
      win_regedit:
        path: HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon
        name: AutoAdminLogon
        state: absent
      with_items:
        - "{{ log_result.stdout | from_json }}"
      when:
        - item.restartRequired
        - psm_restart

    - name: Remove username for AutoAdminLogon
      win_regedit:
        path: HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon
        name: DefaultUsername
        state: absent
      with_items:
        - "{{ log_result.stdout | from_json }}"
      when:
        - item.restartRequired
        - psm_restart

    - name: Remove password for AutoAdminLogon
      win_regedit:
        path: HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon
        name: DefaultPassword
        state: absent
      with_items:
        - "{{ log_result.stdout | from_json }}"
      when:
        - item.restartRequired
        - psm_restart

  rescue:

    - name: Get log path for installation
      win_shell: |
        $Result = Get-Content "{{ psm_install_log }}"
        Write-Output $Result
      register: log_result

    - name: Fetch installation log from path
      fetch:
        src: '{{ item.logPath }}'
        dest: '{{ lookup("config", "DEFAULT_LOG_PATH") | dirname }}/psm/{{ inventory_hostname }}_install.log'
        flat: yes
      with_items:
        - "{{ log_result.stdout | from_json }}"

    - fail:
        msg: 'ERROR: Installation failed. For more info check {{ lookup("config", "DEFAULT_LOG_PATH") | dirname }}/psm/{{ inventory_hostname }}_install.log'

- name: check PSM service status
  win_service:
    name: "{{ psm_service_name }}"
  register: psm_service_info

- set_fact:
    psm_exists: "{{ psm_service_info.exists }}"
